/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Makli
 */

import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.DefaultListModel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public final class Graph extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    
    /**
     * Creates new form Graph
     * @param graphTitle
     * @param DocListModel
     * @param RevDocListModel
     */
    
    public Graph(String graphTitle, DefaultListModel<String> DocListModel, DefaultListModel<String> RevDocListModel) {
        initComponents();
        initComponentsVol2(graphTitle, DocListModel, RevDocListModel);
        SetIcon();
    }
    
    public void initComponentsVol2(String graphTitle, DefaultListModel<String> DocListModel, DefaultListModel<String> RevDocListModel) {
        this.setTitle("Precision\\Recall Graph");
        final XYSeries graphSeries = new XYSeries("Query");
        double similars = 0;
        DefaultListModel<Double> PrecisionPositions = new DefaultListModel<>();
        DefaultListModel<Double> RecallPositions = new DefaultListModel<>();
        
        // Create graph's dataset
        for (int i = 0; i < DocListModel.size(); i++) {
            for (int j = 0; j < RevDocListModel.size(); j++) {
                if (DocListModel.elementAt(i).equalsIgnoreCase(RevDocListModel.elementAt(j))) {
                    similars++;
                    break;
                }
            }
            
            PrecisionPositions.add(i, similars / (i + 1));
            RecallPositions.add(i, similars);
        }
        
        for (int i = 1; i <= RecallPositions.size(); i++) {
            RecallPositions.set(i - 1, RecallPositions.elementAt(i - 1)/similars);
            graphSeries.add(RecallPositions.elementAt(i - 1), PrecisionPositions.elementAt(i - 1));
        }
        
        final XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(graphSeries);

        final JFreeChart graph = ChartFactory.createXYLineChart(graphTitle, "Recall", "Precision", dataset);

        final XYPlot plot = graph.getXYPlot();
        final NumberAxis recallAxis = new NumberAxis("Recall");
        final NumberAxis precisionAxis = new NumberAxis("Precision");
        
        plot.setDomainAxis(recallAxis);
        plot.setRangeAxis(precisionAxis);
        
        graph.setBackgroundPaint(Color.white);
        plot.setOutlinePaint(Color.black);
        
        final ChartPanel chartPanel = new ChartPanel(graph);
        chartPanel.setPreferredSize(new java.awt.Dimension(700, 470));
        setContentPane(chartPanel);
    }
    
    private void SetIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("IRicon.png")));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        final String graphTitle = null;
        final DefaultListModel<String> DocListModel = null;
        final DefaultListModel<String> RevDocListModel = null;
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Graph(graphTitle, DocListModel, RevDocListModel).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
